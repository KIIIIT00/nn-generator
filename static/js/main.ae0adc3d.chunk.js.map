{"version":3,"sources":["components/NNGenerator.jsx","App.js","reportWebVitals.js","index.js"],"names":["NNGen","layers","setLayers","useState","neurons","activation","optimizer","setOptimizer","loss","setLoss","epochs","setEpochs","batchSize","setBatchSize","learningRate","setLearningRate","dataset","setDataset","includeVisualization","setIncludeVisualization","generatedCode","setGeneratedCode","inputShape","setInputShape","activationOptions","updateLayer","index","field","value","newLayers","[object Object]","generateCode","code","previousSize","forEach","layer","slice","formattedCode","lines","split","minIndent","Infinity","line","trim","indentMatch","match","length","map","substring","join","removeIndentation","useEffect","React","createElement","className","onChange","e","target","option","key","type","parseInt","min","parseFloat","max","step","checked","onClick","addLayer","splice","removeLayer","copyCode","navigator","clipboard","writeText","then","alert","catch","err","console","error","downloadCode","element","document","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","removeChild","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ae0adc3d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst NNGen = () => {\r\n  // 初期設定値\r\n  const [layers, setLayers] = useState([\r\n    { neurons: 64, activation: 'relu' },\r\n    { neurons: 32, activation: 'relu' },\r\n    { neurons: 1, activation: 'sigmoid' }\r\n  ]);\r\n  const [optimizer, setOptimizer] = useState('adam');\r\n  const [loss, setLoss] = useState('bce');\r\n  const [epochs, setEpochs] = useState(10);\r\n  const [batchSize, setBatchSize] = useState(32);\r\n  const [learningRate, setLearningRate] = useState(0.001);\r\n  const [dataset, setDataset] = useState('custom');\r\n  const [includeVisualization, setIncludeVisualization] = useState(true);\r\n  const [generatedCode, setGeneratedCode] = useState('');\r\n  const [inputShape, setInputShape] = useState(10);\r\n\r\n  // 活性化関数オプション\r\n  const activationOptions = [\r\n    'relu', 'sigmoid', 'tanh', 'softmax', 'leaky_relu', 'elu', 'selu', 'gelu', 'prelu', 'none'\r\n  ];\r\n\r\n  // オプティマイザーオプション\r\n  const optimizerOptions = [\r\n    'adam', 'sgd', 'rmsprop', 'adagrad', 'adadelta', 'adamw'\r\n  ];\r\n\r\n  // 損失関数オプション\r\n  const lossOptions = [\r\n    'bce', 'bce_with_logits', 'cross_entropy', 'nll', 'mse', 'l1', 'smooth_l1', 'huber'\r\n  ];\r\n\r\n  // データセットオプション\r\n  const datasetOptions = [\r\n    'mnist', 'fashion_mnist', 'cifar10', 'custom'\r\n  ];\r\n\r\n  // レイヤーを追加\r\n  const addLayer = () => {\r\n    setLayers([...layers, { neurons: 32, activation: 'relu' }]);\r\n  };\r\n\r\n  // レイヤーを削除\r\n  const removeLayer = (index) => {\r\n    if (layers.length > 1) {\r\n      const newLayers = [...layers];\r\n      newLayers.splice(index, 1);\r\n      setLayers(newLayers);\r\n    }\r\n  };\r\n\r\n  // レイヤーを更新\r\n  const updateLayer = (index, field, value) => {\r\n    const newLayers = [...layers];\r\n    newLayers[index] = { ...newLayers[index], [field]: value };\r\n    setLayers(newLayers);\r\n  };\r\n\r\n  // コードをコピー\r\n  const copyCode = () => {\r\n    navigator.clipboard.writeText(generatedCode)\r\n      .then(() => {\r\n        alert('コードがクリップボードにコピーされました！');\r\n      })\r\n      .catch((err) => {\r\n        console.error('コピーに失敗しました:', err);\r\n        alert('コピーに失敗しました。手動でコピーしてください。');\r\n      });\r\n  };\r\n\r\n  // コードをダウンロード\r\n  const downloadCode = () => {\r\n    const element = document.createElement('a');\r\n    const file = new Blob([generatedCode], {type: 'text/plain'});\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = 'neural_network.py';\r\n    document.body.appendChild(element);\r\n    element.click();\r\n    document.body.removeChild(element);\r\n  };\r\n\r\n  // インデントを削除して左詰めにするヘルパー関数\r\n  const removeIndentation = (code) => {\r\n    // コードの各行を取得\r\n    const lines = code.split('\\n');\r\n    \r\n    // 空でない行の中で最小のインデントを見つける\r\n    let minIndent = Infinity;\r\n    lines.forEach(line => {\r\n      if (line.trim() !== '') {\r\n        const indentMatch = line.match(/^\\s*/);\r\n        if (indentMatch && indentMatch[0].length < minIndent) {\r\n          minIndent = indentMatch[0].length;\r\n        }\r\n      }\r\n    });\r\n    \r\n    // 最小インデントが無限の場合（全ての行が空）は0に設定\r\n    if (minIndent === Infinity) {\r\n      minIndent = 0;\r\n    }\r\n    \r\n    // 各行からインデントを削除\r\n    return lines.map(line => {\r\n      if (line.trim() === '') {\r\n        return '';\r\n      }\r\n      return line.substring(minIndent);\r\n    }).join('\\n');\r\n  };\r\n\r\n  // コードを生成\r\n  const generateCode = () => {\r\n    let code = `import numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport torch\r\nimport torch.nn as nn\r\nimport torch.optim as optim\r\nfrom torch.utils.data import DataLoader, TensorDataset, random_split\r\n`;\r\n\r\n    // データセットコード\r\n    if (dataset !== 'custom') {\r\n      code += `\r\n# データセットの読み込み\r\nimport torchvision\r\nimport torchvision.transforms as transforms\r\n`;\r\n      if (dataset === 'mnist') {\r\n        code += `\r\n# MNISTデータセットの読み込み\r\ntransform = transforms.Compose([\r\n    transforms.ToTensor(),\r\n    transforms.Normalize((0.1307,), (0.3081,))\r\n])\r\n\r\ntrain_dataset = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)\r\ntest_dataset = torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)\r\n\r\n# データローダーの作成\r\ntrain_loader = DataLoader(train_dataset, batch_size=${batchSize}, shuffle=True)\r\ntest_loader = DataLoader(test_dataset, batch_size=${batchSize}, shuffle=False)\r\n\r\n# 入力形状の設定\r\ninput_size = 784  # 28x28\r\n`;\r\n      } else if (dataset === 'fashion_mnist') {\r\n        code += `\r\n# Fashion MNISTデータセットの読み込み\r\ntransform = transforms.Compose([\r\n    transforms.ToTensor(),\r\n    transforms.Normalize((0.2860,), (0.3530,))\r\n])\r\n\r\ntrain_dataset = torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transform)\r\ntest_dataset = torchvision.datasets.FashionMNIST(root='./data', train=False, download=True, transform=transform)\r\n\r\n# データローダーの作成\r\ntrain_loader = DataLoader(train_dataset, batch_size=${batchSize}, shuffle=True)\r\ntest_loader = DataLoader(test_dataset, batch_size=${batchSize}, shuffle=False)\r\n\r\n# 入力形状の設定\r\ninput_size = 784  # 28x28\r\n`;\r\n      } else if (dataset === 'cifar10') {\r\n        code += `\r\n# CIFAR-10データセットの読み込み\r\ntransform = transforms.Compose([\r\n    transforms.ToTensor(),\r\n    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2470, 0.2435, 0.2616))\r\n])\r\n\r\ntrain_dataset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\r\ntest_dataset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\r\n\r\n# データローダーの作成\r\ntrain_loader = DataLoader(train_dataset, batch_size=${batchSize}, shuffle=True)\r\ntest_loader = DataLoader(test_dataset, batch_size=${batchSize}, shuffle=False)\r\n\r\n# 入力形状の設定\r\ninput_size = 3 * 32 * 32  # 3x32x32\r\n`;\r\n      }\r\n    } else {\r\n      code += `\r\n# カスタムデータセット\r\n# ここにデータ読み込みと前処理コードを追加\r\nX = torch.randn(1200, ${inputShape})\r\ny = torch.randint(0, 2, (1200, 1)).float()\r\n\r\n# データセットを訓練用と検証用に分割\r\ndataset = TensorDataset(X, y)\r\ntrain_size = int(0.8 * len(dataset))\r\ntest_size = len(dataset) - train_size\r\ntrain_dataset, test_dataset = random_split(dataset, [train_size, test_size])\r\n\r\n# データローダーの作成\r\ntrain_loader = DataLoader(train_dataset, batch_size=${batchSize}, shuffle=True)\r\ntest_loader = DataLoader(test_dataset, batch_size=${batchSize}, shuffle=False)\r\n\r\n# 入力形状の設定\r\ninput_size = ${inputShape}\r\n`;\r\n    }\r\n\r\n    // モデルクラスの作成\r\n    code += `\r\n# ニューラルネットワークモデルの定義\r\nclass NeuralNetwork(nn.Module):\r\n    def __init__(self):\r\n        super(NeuralNetwork, self).__init__()\r\n        self.layers = nn.Sequential(\r\n`;\r\n\r\n    // レイヤーの追加\r\n    let previousSize = (dataset === 'mnist' || dataset === 'fashion_mnist') ? 784 : \r\n                      (dataset === 'cifar10') ? 3 * 32 * 32 : inputShape;\r\n    \r\n    layers.forEach((layer, index) => {\r\n      let activation = '';\r\n      if (layer.activation === 'relu') {\r\n        activation = 'nn.ReLU()';\r\n      } else if (layer.activation === 'sigmoid') {\r\n        activation = 'nn.Sigmoid()';\r\n      } else if (layer.activation === 'tanh') {\r\n        activation = 'nn.Tanh()';\r\n      } else if (layer.activation === 'softmax') {\r\n        activation = 'nn.Softmax(dim=1)';\r\n      } else if (layer.activation === 'leaky_relu') {\r\n        activation = 'nn.LeakyReLU(0.1)';\r\n      } else if (layer.activation === 'elu') {\r\n        activation = 'nn.ELU()';\r\n      } else if (layer.activation === 'selu') {\r\n        activation = 'nn.SELU()';\r\n      } else if (layer.activation === 'gelu') {\r\n        activation = 'nn.GELU()';\r\n      } else if (layer.activation === 'prelu') {\r\n        activation = 'nn.PReLU()';\r\n      } else if (layer.activation === 'none') {\r\n        activation = '';\r\n      }\r\n      \r\n      code += `            nn.Linear(${previousSize}, ${layer.neurons}),\\n`;\r\n      if (activation) {\r\n        code += `            ${activation},\\n`;\r\n      }\r\n      \r\n      previousSize = layer.neurons;\r\n    });\r\n    \r\n    code = code.slice(0, -2); // 最後のカンマと改行を削除\r\n    \r\n    code += `\r\n        )\r\n    \r\n    def forward(self, x):\r\n        if x.dim() > 2:\r\n            x = x.view(x.size(0), -1)  # フラット化\r\n        return self.layers(x)\r\n\r\n# モデルとデバイスの設定\r\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\r\nmodel = NeuralNetwork().to(device)\r\nprint(model)\r\n\r\n# 損失関数とオプティマイザーの設定\r\n`;\r\n\r\n    // 損失関数の設定\r\n    if (loss === 'bce') {\r\n      code += `criterion = nn.BCELoss()\\n`;\r\n    } else if (loss === 'bce_with_logits') {\r\n      code += `criterion = nn.BCEWithLogitsLoss()\\n`;\r\n    } else if (loss === 'cross_entropy') {\r\n      code += `criterion = nn.CrossEntropyLoss()\\n`;\r\n    } else if (loss === 'nll') {\r\n      code += `criterion = nn.NLLLoss()\\n`;\r\n    } else if (loss === 'mse') {\r\n      code += `criterion = nn.MSELoss()\\n`;\r\n    } else if (loss === 'l1') {\r\n      code += `criterion = nn.L1Loss()\\n`;\r\n    } else if (loss === 'smooth_l1') {\r\n      code += `criterion = nn.SmoothL1Loss()\\n`;\r\n    } else if (loss === 'huber') {\r\n      code += `criterion = nn.HuberLoss()\\n`;\r\n    }\r\n\r\n    // オプティマイザーの設定\r\n    if (optimizer === 'adam') {\r\n      code += `optimizer = optim.Adam(model.parameters(), lr=${learningRate})\\n`;\r\n    } else if (optimizer === 'sgd') {\r\n      code += `optimizer = optim.SGD(model.parameters(), lr=${learningRate}, momentum=0.9)\\n`;\r\n    } else if (optimizer === 'rmsprop') {\r\n      code += `optimizer = optim.RMSprop(model.parameters(), lr=${learningRate})\\n`;\r\n    } else if (optimizer === 'adagrad') {\r\n      code += `optimizer = optim.Adagrad(model.parameters(), lr=${learningRate})\\n`;\r\n    } else if (optimizer === 'adadelta') {\r\n      code += `optimizer = optim.Adadelta(model.parameters(), lr=${learningRate})\\n`;\r\n    } else if (optimizer === 'adamw') {\r\n      code += `optimizer = optim.AdamW(model.parameters(), lr=${learningRate})\\n`;\r\n    }\r\n\r\n    // 訓練コード\r\n    code += `\r\n# 訓練関数\r\ndef train(model, train_loader, criterion, optimizer, device):\r\n    model.train()\r\n    running_loss = 0.0\r\n    correct = 0\r\n    total = 0\r\n    \r\n    for inputs, targets in train_loader:\r\n        inputs, targets = inputs.to(device), targets.to(device)\r\n        \r\n        # 勾配をゼロにリセット\r\n        optimizer.zero_grad()\r\n        \r\n        # 順伝播 + 逆伝播 + 最適化\r\n        outputs = model(inputs)\r\n        \r\n        # ターゲットの形状を調整（必要な場合）\r\n        if outputs.shape != targets.shape:\r\n            if outputs.shape[1] == 1:\r\n                # バイナリ分類の場合\r\n                targets = targets.float().view(-1, 1)\r\n            else:\r\n                # 多クラス分類の場合、ラベルとしての形状に変換\r\n                targets = targets.long().view(-1)\r\n        \r\n        loss = criterion(outputs, targets)\r\n        loss.backward()\r\n        optimizer.step()\r\n        \r\n        running_loss += loss.item()\r\n        \r\n        # 精度の計算（バイナリ分類またはマルチクラス分類に対応）\r\n        if outputs.shape[1] == 1:  # バイナリ分類\r\n            predicted = (outputs > 0.5).float()\r\n            total += targets.size(0)\r\n            correct += (predicted == targets).sum().item()\r\n        else:  # マルチクラス分類\r\n            _, predicted = outputs.max(1)\r\n            total += targets.size(0)\r\n            correct += predicted.eq(targets).sum().item()\r\n    \r\n    epoch_loss = running_loss / len(train_loader)\r\n    epoch_acc = 100. * correct / total\r\n    return epoch_loss, epoch_acc\r\n\r\n# 評価関数\r\ndef evaluate(model, test_loader, criterion, device):\r\n    model.eval()\r\n    running_loss = 0.0\r\n    correct = 0\r\n    total = 0\r\n    \r\n    with torch.no_grad():\r\n        for inputs, targets in test_loader:\r\n            inputs, targets = inputs.to(device), targets.to(device)\r\n            \r\n            outputs = model(inputs)\r\n            \r\n            # ターゲットの形状を調整（必要な場合）\r\n            if outputs.shape != targets.shape:\r\n                if outputs.shape[1] == 1:\r\n                    # バイナリ分類の場合\r\n                    targets = targets.float().view(-1, 1)\r\n                else:\r\n                    # 多クラス分類の場合、ラベルとしての形状に変換\r\n                    targets = targets.long().view(-1)\r\n            \r\n            loss = criterion(outputs, targets)\r\n            running_loss += loss.item()\r\n            \r\n            # 精度の計算（バイナリ分類またはマルチクラス分類に対応）\r\n            if outputs.shape[1] == 1:  # バイナリ分類\r\n                predicted = (outputs > 0.5).float()\r\n                total += targets.size(0)\r\n                correct += (predicted == targets).sum().item()\r\n            else:  # マルチクラス分類\r\n                _, predicted = outputs.max(1)\r\n                total += targets.size(0)\r\n                correct += predicted.eq(targets).sum().item()\r\n    \r\n    epoch_loss = running_loss / len(test_loader)\r\n    epoch_acc = 100. * correct / total\r\n    return epoch_loss, epoch_acc\r\n\r\n# 訓練ループ\r\ntrain_losses = []\r\ntrain_accs = []\r\nval_losses = []\r\nval_accs = []\r\n\r\nfor epoch in range(${epochs}):\r\n    train_loss, train_acc = train(model, train_loader, criterion, optimizer, device)\r\n    val_loss, val_acc = evaluate(model, test_loader, criterion, device)\r\n    \r\n    train_losses.append(train_loss)\r\n    train_accs.append(train_acc)\r\n    val_losses.append(val_loss)\r\n    val_accs.append(val_acc)\r\n    \r\n    print(f'Epoch {epoch+1}/{epochs}, Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%, Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.2f}%')\r\n\r\nprint('訓練完了')\r\n`;\r\n\r\n    // 可視化コード\r\n    if (includeVisualization) {\r\n      code += `\r\n# 訓練過程の可視化\r\nplt.figure(figsize=(12, 4))\r\n\r\nplt.subplot(1, 2, 1)\r\nplt.plot(train_accs)\r\nplt.plot(val_accs)\r\nplt.title('モデル精度')\r\nplt.ylabel('精度 (%)')\r\nplt.xlabel('エポック')\r\nplt.legend(['訓練', '検証'], loc='lower right')\r\n\r\nplt.subplot(1, 2, 2)\r\nplt.plot(train_losses)\r\nplt.plot(val_losses)\r\nplt.title('モデル損失')\r\nplt.ylabel('損失')\r\nplt.xlabel('エポック')\r\nplt.legend(['訓練', '検証'], loc='upper right')\r\n\r\nplt.tight_layout()\r\nplt.show()\r\n`;\r\n    }\r\n\r\n    // モデル保存コード\r\n    code += `\r\n# モデルの保存\r\ntorch.save(model.state_dict(), 'model.pth')\r\nprint(\"モデルを保存しました。\")\r\n`;\r\n\r\n    // インデントを削除して左詰めにする\r\n    const formattedCode = removeIndentation(code);\r\n    setGeneratedCode(formattedCode);\r\n  };\r\n\r\n  // コンポーネントがマウントされたときに最初のコード生成を実行\r\n  useEffect(() => {\r\n    generateCode();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"flex flex-col p-4 max-w-4xl mx-auto\">\r\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">ノーコード ニューラルネットワーク コードジェネレーター</h1>\r\n      \r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div className=\"bg-gray-100 p-4 rounded-lg\">\r\n          <h2 className=\"text-lg font-semibold mb-2\">データセット設定</h2>\r\n          <div className=\"mb-2\">\r\n            <label className=\"block text-sm mb-1\">データセット:</label>\r\n            <select\r\n              className=\"w-full p-2 border rounded\"\r\n              value={dataset}\r\n              onChange={(e) => setDataset(e.target.value)}\r\n            >\r\n              {datasetOptions.map(option => (\r\n                <option key={option} value={option}>{option}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          \r\n          {dataset === 'custom' && (\r\n            <div className=\"mb-2\">\r\n              <label className=\"block text-sm mb-1\">入力形状 (特徴量の数):</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"w-full p-2 border rounded\"\r\n                value={inputShape}\r\n                onChange={(e) => setInputShape(parseInt(e.target.value))}\r\n                min=\"1\"\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"bg-gray-100 p-4 rounded-lg\">\r\n          <h2 className=\"text-lg font-semibold mb-2\">トレーニング設定</h2>\r\n          <div className=\"mb-2\">\r\n            <label className=\"block text-sm mb-1\">オプティマイザー:</label>\r\n            <select\r\n              className=\"w-full p-2 border rounded\"\r\n              value={optimizer}\r\n              onChange={(e) => setOptimizer(e.target.value)}\r\n            >\r\n              {optimizerOptions.map(option => (\r\n                <option key={option} value={option}>{option}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          \r\n          <div className=\"mb-2\">\r\n            <label className=\"block text-sm mb-1\">学習率:</label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"w-full p-2 border rounded\"\r\n              value={learningRate}\r\n              onChange={(e) => setLearningRate(parseFloat(e.target.value))}\r\n              min=\"0.0001\"\r\n              max=\"1\"\r\n              step=\"0.0001\"\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"mb-2\">\r\n            <label className=\"block text-sm mb-1\">損失関数:</label>\r\n            <select\r\n              className=\"w-full p-2 border rounded\"\r\n              value={loss}\r\n              onChange={(e) => setLoss(e.target.value)}\r\n            >\r\n              {lossOptions.map(option => (\r\n                <option key={option} value={option}>{option}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          \r\n          <div className=\"mb-2\">\r\n            <label className=\"block text-sm mb-1\">エポック数:</label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"w-full p-2 border rounded\"\r\n              value={epochs}\r\n              onChange={(e) => setEpochs(parseInt(e.target.value))}\r\n              min=\"1\"\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"mb-2\">\r\n            <label className=\"block text-sm mb-1\">バッチサイズ:</label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"w-full p-2 border rounded\"\r\n              value={batchSize}\r\n              onChange={(e) => setBatchSize(parseInt(e.target.value))}\r\n              min=\"1\"\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"bg-gray-100 p-4 rounded-lg\">\r\n          <h2 className=\"text-lg font-semibold mb-2\">追加設定</h2>\r\n          <div className=\"mb-4\">\r\n            <label className=\"flex items-center\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={includeVisualization}\r\n                onChange={(e) => setIncludeVisualization(e.target.checked)}\r\n                className=\"mr-2\"\r\n              />\r\n              <span>訓練過程の可視化を含める</span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"bg-gray-100 p-4 rounded-lg mb-4\">\r\n        <div className=\"flex justify-between items-center mb-2\">\r\n          <h2 className=\"text-lg font-semibold\">レイヤー設定</h2>\r\n          <button \r\n            onClick={addLayer}\r\n            className=\"bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600\"\r\n          >\r\n            レイヤーを追加\r\n          </button>\r\n        </div>\r\n        \r\n        {layers.map((layer, index) => (\r\n          <div key={index} className=\"flex flex-wrap items-center mb-2 p-2 border rounded bg-white\">\r\n            <div className=\"mr-2 mb-2 md:mb-0\">\r\n              <span className=\"font-medium\">レイヤー {index + 1}:</span>\r\n            </div>\r\n            \r\n            <div className=\"mr-2 mb-2 md:mb-0\">\r\n              <label className=\"text-sm mr-1\">ニューロン数:</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"w-20 p-1 border rounded\"\r\n                value={layer.neurons}\r\n                onChange={(e) => updateLayer(index, 'neurons', parseInt(e.target.value))}\r\n                min=\"1\"\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"mr-2 mb-2 md:mb-0\">\r\n              <label className=\"text-sm mr-1\">活性化関数:</label>\r\n              <select\r\n                className=\"p-1 border rounded\"\r\n                value={layer.activation}\r\n                onChange={(e) => updateLayer(index, 'activation', e.target.value)}\r\n              >\r\n                {activationOptions.map(option => (\r\n                  <option key={option} value={option}>{option}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            \r\n            <div className=\"ml-auto\">\r\n              {layers.length > 1 && (\r\n                <button\r\n                  onClick={() => removeLayer(index)}\r\n                  className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600 text-sm\"\r\n                >\r\n                  削除\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"mb-4\">\r\n        <button\r\n          onClick={generateCode}\r\n          className=\"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 w-full font-bold\"\r\n        >\r\n          Pythonコードを生成\r\n        </button>\r\n      </div>\r\n      \r\n      <div className=\"bg-gray-900 text-gray-100 p-4 rounded-lg overflow-auto\">\r\n        <div className=\"flex justify-between items-center mb-2\">\r\n          <h2 className=\"text-lg font-semibold\">生成されたコード</h2>\r\n          <div className=\"flex\">\r\n            <button\r\n              onClick={copyCode}\r\n              className=\"bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 mr-2\"\r\n            >\r\n              コピー\r\n            </button>\r\n            <button\r\n              onClick={downloadCode}\r\n              className=\"bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600\"\r\n            >\r\n              ダウンロード\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <pre className=\"whitespace-pre text-left overflow-x-auto\">\r\n          <code>{generatedCode}</code>\r\n        </pre>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NNGen;","import React from 'react';\nimport './App.css';\nimport NNGen from './components/NNGenerator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NNGen/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}